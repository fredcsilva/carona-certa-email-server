import { createApp } from './src/app.js';
import { emailConfig, validateConfig } from './src/config/email.config.js';

/**
 * Inicializa√ß√£o do servidor
 * Ponto de entrada da aplica√ß√£o
 */
const startServer = async () => {
  try {
    // Valida configura√ß√µes
    validateConfig();

    // Cria aplica√ß√£o
    const app = createApp();

    // Inicia servidor
    const server = app.listen(emailConfig.port, () => {
      console.log('üöÄ ========================================');
      console.log(`üìß Servidor de Email iniciado`);
      console.log(`üåê Porta: ${emailConfig.port}`);
      console.log(`üì¨ Email from: ${emailConfig.from}`);
      console.log(`üîß Ambiente: ${emailConfig.nodeEnv}`); // ‚Üê Use emailConfig.nodeEnv
      console.log('üöÄ ========================================');
      console.log('\nüìã Rotas dispon√≠veis:');
      console.log('  GET  /');
      console.log('  GET  /health');
      console.log('  POST /email/boas-vindas');
      console.log('  POST /email/recuperar-senha');
      console.log('  POST /email/verificacao');
      console.log('  POST /email/notificacao');
      console.log('  POST /email/com-anexo');
      console.log('\n‚úÖ Servidor pronto para receber requisi√ß√µes!\n');
    });

    // Graceful shutdown
    const gracefulShutdown = (signal) => {
      console.log(`\n‚ö†Ô∏è  ${signal} recebido. Encerrando servidor gracefully...`);
      server.close(() => {
        console.log('‚úÖ Servidor encerrado com sucesso');
        process.exit(0);
      });

      // For√ßar encerramento ap√≥s 10 segundos
      setTimeout(() => {
        console.error('‚ùå For√ßando encerramento ap√≥s timeout');
        process.exit(1);
      }, 10000);
    };

    // Sinais de encerramento
    process.on('SIGTERM', () => gracefulShutdown('SIGTERM'));
    process.on('SIGINT', () => gracefulShutdown('SIGINT'));

    // Tratamento de erros n√£o capturados
    process.on('unhandledRejection', (reason, promise) => {
      console.error('‚ùå Unhandled Rejection at:', promise);
      console.error('‚ùå Reason:', reason);
      process.exit(1);
    });

    process.on('uncaughtException', (error) => {
      console.error('‚ùå Uncaught Exception:', error);
      process.exit(1);
    });

  } catch (error) {
    console.error('‚ùå Erro ao iniciar servidor:', error.message);
    process.exit(1);
  }
};

startServer();